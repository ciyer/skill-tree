[graphviz]
rankdir = "TD"

[doc]
columns = ["status"]

[doc.defaults]
status = "tbd"

# Possible status values
[doc.emoji]
"tbd" = "▯▯▯▯▯"
"exploration" = "▮▯▯▯▯"
"design" = "▮▮▯▯▯"
"implementation" = "▮▮▮▯▯"
"stabilization" = "▮▮▮▮▯"
"done" = "▮▮▮▮▮"

[[group]]
name = "async-traits"
label = "Unergonomic async fns in traits"
description = [
  "Write non-dyn-safe traits that can have fns that return futures",
]
items = [
  { label = "Type alias impl Trait", status = "implementation" },
  { label = "Generic associated types", status = "implementation" },
]

[[group]]
name = "async-fn-everywhere"
label = "Async fn everywhere"
description = [
  "Write async fn anywhere you can write fn",
  "Write async closures anywhere you can write sync closures",
]
requires = [
  "async-traits",
]
items = [
  { label = "Support for `dyn Trait` where `Trait` has async fn", status = "design" },
  { label = "Async fn sugar in traits", status = "design" },
  { label = "Async closure support", team = "traits" },
  { label = "Boxable, recursive async fn", team = "lang" },
]

[[group]]
name = "async-iter"
label = "Async iteration is awesome"
description = [
  "Use async iterators as easily as sync iterators",
  "Write async and sync iterators with equal ease",
]
requires = [
  "async-fn-everywhere",
]
items = [
  { label = "AsyncIterator trait", team = "libs" },
  { label = "Common combinators on AsyncIterator", team = "libs" },
  { label = "Generators (both sync and async)", team = "lang" },
  { label = "Easy conversion of sync iter to async iter", team = "libs" },
]

[[group]]
name = "async-read-and-write"
label = "Async read and write are a pleasure to use"
description = [
  "Easy to pass around interoperable readers and writers",
  "Easy to impl AsyncRead and AsyncWrite traits",
  "Easy to write adapters that wrap async read and async write",
]
requires = [
  "async-fn-everywhere",
]
items = [
  { label = "AsyncRead trait in std", team = "async" },
  { label = "AsyncWrite trait in std", team = "async" },
  { label = "TBD: some way to write poll fns easily", team = "lang" },
]

[[group]]
name = "portability-is-possible"
label = "Portability across runtimes is possible"
description = [
  "Grab a library from crates.io and<br/>it works with your chosen runtime easily,<br/>as long as the author does a good job",
  "Possible to author libraries<br/>that can be used with many runtimes,<br/>but requires careful use of traits",
  "Create a new runtime and have existing (portable) libraries work<br/>with no modifications",
]
requires = [
  "async-iter",
  "async-read-and-write",
]
items = [
  { label = "Trait for spawning tasks", team = "async" },
  { label = "Trait for spawning blocking tasks", team = "async" },
  { label = "Trait for timers", team = "async" },
  { label = "Common utilities like select, join, mutexes", team = "async" },
]

[[group]]
name = "retargetable-io"
label = "Retargetable I/O"
description = [
  "Use Tcp Streams and other constructs without baking in a specific runtime or implementation",
  "Use Tcp Streams without threading generics all throughout your code",
]
requires = [
  "portability-is-possible",
]
items = [
  { label = "TBD", team = "async" },
]

[[group]]
name = "portability-by-default"
label = "Portability across runtimes by default"
description = [
  "The easiest, most natural code to write is portable across runtimes"
]
requires = [
  "portability-is-possible",
  "retargetable-io",
]
items = [
  { label = "TBD", team = "async" },
]

[[group]]
name = "diagnostics"
label = "Compiler diagnostic targeting async patterns"
description = [
  "Compile async rust code and understand all the errors you get",
  "Be confident you've avoided common async footguns",
]
items = [
  { label = "Diagnostics improvements (expand)", team = "compiler" },
  { label = "Lint holding things over an await that should not be held over an await", team = "compiler" },
  { label = "Lint for blocking functions in an async context", team = "compiler" },
  { label = "Lint for functions that will take too long to execute", team = "compiler" },
  { label = "Lint when potentially canceling 'futures not known to be cancel safe'", team = "compiler" },
  { label = "Lint for sync dropping when there's an async close", team = "compiler" },
]

[[group]]
name = "documentation"
label = "Joyful, jaw-dropping async documentation"
description = [
  "Search for 'async Rust' on google, click 'I feel lucky' and get a book that...",
  "takes you from basic Rust knowledge to productive in async Rust",
  "identifies scenarios where async is a good fit (and where it is not)",
  "gives practical advice for common design patterns",
  "gives detailed coverage of how async works on demand,<br/>but doesn't force you to learn it",
]
requires = [
  "portability-is-possible"
]
items = [
  { label = "TBD" },
  { label = "Work on identifying common design patterns", team = "async" },
]

[[group]]
name = "async-raii"
label = "Async RAII"
description = [
  "Add an async drop and be confident that it will be invoked without effort",
  "Reliably detect cases where sync drop might be used instead",
]
requires = [
  "async-traits"
]
items = [
  { label = "Ability to write an async disposal method" },
  { label = "Lint for sync dropping when there's async drop", team = "compiler" },
]

[[group]]
name = "sync-async-parity"
label = "Sync-async parity"
description = [
  "Convert most sync code into async code by adding `async` in various places<br/>and tweaking some libraries in a straightforward way",
]
requires = [
  "async-iter",
  "async-fn-everywhere",
  "portability-by-default",
  "async-raii",
  "retargetable-io"
]
items = [
]

[[group]]
name = "debugger-integration"
label = "Debugger integration"
description = [
  "Use a debugger to step through Rust code, print expressions, <br/> in a way that is roughly analogous to C++ code",
]
items = [
  { label = "Better debuginfo" },
]

[[group]]
name = "debugging-tooling"
label = "Debugging tooling"
description = [
  "Find out what tasks your program currently has",
  "Detect common pitfalls like overly long poll functions,<br/>long time from wake to poll executing",
  "Detecting what tasks are blocked on",
]
requires = [
  "debugger-integration"
]
items = [
  { label = "Runtime:Debugger interface" },
  { label = "Runtime bug detectors" },
]

[[group]]
name = "profiling-tooling"
label = "Profiling tooling"
description = [
  "Profiles of specific tasks (heap, memory, etc)",
  "Overall profiles",
]
requires = [
  "debugging-tooling"
]
items = [
  { label = "TBD" },
]

[[group]]
name = "first-class-learning-experience"
label = "First-class learning experience"
description = [
  "When async doesn't work as I expect <br/> (whether at compilation time, runtime, debugging)...",
  "something identifies the problem",
  "something explains the problem",
  "something proposes solutions",
  "after reading the explanation and the solutions, <br/> I understand what I did wrong",
]
requires = [
  "portability-by-default",
  "diagnostics",
  "documentation",
  "debugging-tooling",
]
items = [
  { label = "Runtime warnings in debug mode" },
  { label = "Cross-referencing between docs, lints, errors, and so forth" },
]

[[group]]
name = "portability-across-send"
label = "Portability across Send"
description = [
  "write code that can be Send or not-Send at zero-cost (e.g., use Rc vs Arc)",
]
requires = [
  "async-traits",
]
items = [
  { label = "associated traits" },
  { label = "module-level generics" },
]

[[group]]
name = "ffcf"
label = "If it compiles, it works"
description = [
    "Bugs are generally logic bugs, not a result of surprising async mechanisms",
    "Easy to create parallelism operating on borrowed data",
    "When tasks are no longer needed, they can be reliably canceled",
    "It is easy to visualize your program's task structure",
]
requires = [
  "async-traits",
  "debugging-tooling",
]
items = [
  { label = "Way to avoid tasks being dropped unexpectedly while they continue to execute" },
  { label = "Mechanism for launching tasks within those scopes that can reference borrowed data" },
  { label = "Hierarchical structure for tasks with cancelation propagation" },
  { label = "Integration into the visualization infrastructure and debug tools" },
]

[[group]]
name = "zero-copy"
label = "Zero copy works beautifully"
description = [
  "permit zero copy",
]
requires = [
  "async-traits",
  "ffcf",
]
items = [
  { label = "TBD" },
]


[[group]]
name = "testing"
label = "Testing your async code is easy"
description = [
  "Testing async code does not require a lot of pre-planning",
  "You can easily test connection errors, delays, and other corner cases",
]
requires = [
  "retargetable-io",
]
items = [
  { label = "Ability to fire timers programmatically (mock time)" },
  { label = "`run_until_stalled`" },
  { label = "`run_until_stalled`" },
]

[[group]]
name = "long-running-loops"
label = "Long-running sequential loops are easy to find and remedy"
description = [
  "Testing async code does not require a lot of pre-planning",
  "You can easily test connection errors, delays, and other corner cases",
]
requires = [
  "profiling-tooling",
  "ffcf",
]
items = [
  { label = "Integration of profiling output into lint tools" },
  { label = "Combinators and hooks to make it easy to yield in long-running loops" },
  { label = "Highly optimized `spawn_blocking`" },
]

# How to record out of scope things?

